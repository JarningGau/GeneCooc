getwd()
devtools::create("~/dev/GeneCooc")
require(usethis)
require(devtools)
use_readme_rmd()
use_r("cal_gene_cooc_matrix")
required.packages <- c("Seurat", "tidyverse", "CelliD")
for (pkg in required.packages) {
library(pkg, character.only = T)
}
source("R/GeneCooc.R")
q()
q()
getwd()
getwd()
devtools::document()
library(devtools)
use_package('Seurat')
use_package('magrittr')
use_package('magrittr', min_version = packageVersion('magrittr'))
use_mit_license()
?use_package
use_package("CelliD", type = "Suggests", min_version = packageVersion("CelliD"))
use_package("lme4", type = "Suggests", min_version = packageVersion("lme4"))
use_package("Matrix", type = "Suggests", min_version = packageVersion("Matrix"))
use_package("archetypes", type = "Suggests", min_version = packageVersion("archetypes"))
use_package("dendextend", type = "Suggests", min_version = packageVersion("dendextend"))
use_package("dplyr", type = "Suggests", min_version = packageVersion("dplyr"))
use_package("dynamicTreeCut", type = "Suggests", min_version = packageVersion("dynamicTreeCut"))
use_package("ggrepel", type = "Suggests", min_version = packageVersion("ggrepel"))
use_package("glue", type = "Suggests", min_version = packageVersion("glue"))
use_package("igraph", type = "Suggests", min_version = packageVersion("igraph"))
use_package("lme4", type = "Suggests", min_version = packageVersion("lme4"))
use_package("pheatmap", type = "Suggests", min_version = packageVersion("pheatmap"))
use_package("proxy", type = "Suggests", min_version = packageVersion("proxy"))
use_package("uwot", type = "Suggests", min_version = packageVersion("uwot"))
build_readme()
